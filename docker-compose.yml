version: '3.9'
services:
  mysql:
    image: mysql:8.0
    container_name: mysql_service
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
    - 3306:3306
    volumes:
    - mysql_mysql_mysql_data:/var/lib/mysql
    networks:
    - data_pipeline_network
    restart: unless-stopped
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: mysql_gui
    environment:
      PMA_HOST: ${PMA_HOST}
      PMA_USER: ${PMA_USER}
      PMA_PASSWORD: ${PMA_PASSWORD}
    ports:
    - 8080:80
    depends_on:
      mysql:
        condition: service_started
    networks:
    - data_pipeline_network
    restart: unless-stopped
  airflow-db:
    image: postgres:14
    container_name: airflow-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
    - airflow_airflow-db_airflow_db_data:/var/lib/postgresql/data
    ports:
    - 5432:5432
    networks:
    - data_pipeline_network
  airflow-init:
    image: apache/airflow:2.6.2
    container_name: airflow-init
    depends_on:
      airflow-db:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
    command: "bash -c \"\n  echo 'Initializing Airflow DB...' &&\n  airflow db init\
      \ &&\n  echo 'Creating Airflow admin user...' &&\n  airflow users create --username\
      \ ${AIRFLOW_ADMIN_USER} --password ${AIRFLOW_ADMIN_PASS} --firstname Airflow\
      \ --lastname Admin --role Admin --email ${AIRFLOW_ADMIN_EMAIL} &&\n  echo 'Airflow\
      \ initialization is complete! Container will stay alive for healthcheck...'\
      \ &&\n  tail -f /dev/null\n\"\n"
    healthcheck:
      test:
      - CMD-SHELL
      - airflow db check
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
    - data_pipeline_network
  airflow-scheduler:
    image: apache/airflow:2.6.2
    container_name: airflow-scheduler
    depends_on:
      airflow-db:
        condition: service_started
      airflow-init:
        condition: service_healthy
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
    volumes:
    - airflow_airflow-scheduler_airflow_dags:/opt/airflow/dags
    - airflow_airflow-scheduler_airflow_logs:/opt/airflow/logs
    command:
    - airflow
    - scheduler
    networks:
    - data_pipeline_network
  airflow-webserver:
    image: apache/airflow:2.6.2
    container_name: airflow-webserver
    depends_on:
      airflow-scheduler:
        condition: service_started
      airflow-init:
        condition: service_healthy
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
    ports:
    - 8081:8080
    volumes:
    - airflow_airflow-webserver_airflow_dags:/opt/airflow/dags
    - airflow_airflow-webserver_airflow_logs:/opt/airflow/logs
    command:
    - airflow
    - webserver
    networks:
    - data_pipeline_network
networks:
  data_pipeline_network: {}
volumes:
  mysql_mysql_mysql_data: {}
  airflow_airflow-db_airflow_db_data: {}
  airflow_airflow-scheduler_airflow_dags: {}
  airflow_airflow-scheduler_airflow_logs: {}
  airflow_airflow-webserver_airflow_dags: {}
  airflow_airflow-webserver_airflow_logs: {}
