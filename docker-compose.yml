version: '3.9'
services:
  nifi:
    build:
      context: docker_templates/nifi
    container_name: nifi
    environment:
    - NIFI_WEB_HTTPS_PORT=8443
    - SINGLE_USER_CREDENTIALS_USERNAME=admin
    - SINGLE_USER_CREDENTIALS_PASSWORD=ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB
    - NIFI_HOME=/opt/nifi/nifi-current
    - NIFI_LOG_DIR=/opt/nifi/nifi-current/logs
    - NIFI_TOOLKIT_HOME=/opt/nifi/nifi-toolkit-current
    - NIFI_PID_DIR=/opt/nifi/nifi-current/run
    - NIFI_BASE_DIR=/opt/nifi
    ports:
    - 8443:8443
    - 52020:52020
    networks:
    - data_pipeline_network
    healthcheck:
      test:
      - CMD
      - 'true'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  jobmanager:
    image: apache/flink:1.16.0
    container_name: jobmanager
    command: jobmanager
    environment:
    - JOB_MANAGER_RPC_ADDRESS=${FLINK_JOB_MANAGER_RPC_ADDRESS}
    - 'FLINK_PROPERTIES=

      jobmanager.rpc.address: ${FLINK_JOB_MANAGER_RPC_ADDRESS}

      '
    ports:
    - 8081:8081
    networks:
    - data_pipeline_network
    volumes:
    - apacheflink_jobmanager_jobmanager-logs:/opt/flink/log
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8081/taskmanagers
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  taskmanager:
    image: apache/flink:1.16.0
    container_name: taskmanager
    command: taskmanager
    environment:
    - JOB_MANAGER_RPC_ADDRESS=${FLINK_JOB_MANAGER_RPC_ADDRESS}
    - 'FLINK_PROPERTIES=

      jobmanager.rpc.address: ${FLINK_JOB_MANAGER_RPC_ADDRESS}

      '
    depends_on:
      jobmanager:
        condition: service_healthy
    restart: always
    networks:
    - data_pipeline_network
    volumes:
    - apacheflink_taskmanager_taskmanager-logs:/opt/flink/log
    healthcheck:
      test:
      - CMD-SHELL
      - ps aux | grep -q 'taskmanager'
      interval: 30s
      timeout: 10s
      retries: 8
      start_period: 30s
  mysql:
    image: mysql:8.0
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
    - 3306:3306
    volumes:
    - mysql_mysql_mysql_data:/var/lib/mysql
    networks:
    - data_pipeline_network
    healthcheck:
      test:
      - CMD-SHELL
      - mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} -e 'SHOW DATABASES;' || exit 1
      interval: 10s
      timeout: 10s
      retries: 30
    restart: unless-stopped
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: ${PMA_HOST}
      PMA_USER: ${PMA_USER}
      PMA_PASSWORD: ${PMA_PASSWORD}
    ports:
    - 8080:80
    depends_on:
      mysql:
        condition: service_healthy
    networks:
    - data_pipeline_network
    healthcheck:
      test:
      - CMD
      - curl
      - -Ss
      - http://localhost/robots.txt
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
  cassandra:
    image: cassandra:4.0
    container_name: cassandra_service
    environment:
      CASSANDRA_CLUSTER_NAME: ${CASSANDRA_CLUSTER_NAME}
      CASSANDRA_SEEDS: ${CASSANDRA_SEEDS}
    ports:
    - 9042:9042
    volumes:
    - cassandra_cassandra_cassandra_data:/var/lib/cassandra
    networks:
    - data_pipeline_network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - '[ $$(nodetool statusgossip) = running ]'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  prefect-orion:
    image: prefecthq/prefect:2-latest
    container_name: prefect-orion
    command: "bash -c \"\n  prefect server start --host 0.0.0.0 --port 4200\n\"\n"
    ports:
    - 4200:4200
    volumes:
    - prefect_prefect-orion_prefect_data:/root/.prefect
    networks:
    - data_pipeline_network
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import http.client; conn = http.client.HTTPConnection('localhost', 4200);
        conn.request('GET', '/health'); exit(0) if conn.getresponse().status == 200
        else exit(1)
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  prefect-worker:
    image: prefecthq/prefect:2-latest
    container_name: prefect-worker
    depends_on:
      prefect-orion:
        condition: service_healthy
    environment:
      PREFECT_API_URL: http://prefect-orion:4200/api
    command: "bash -c \"\n  prefect worker start -p default\n\"\n"
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import http.client, json; conn = http.client.HTTPConnection('prefect-orion',
        4200); conn.request('GET', '/api/health'); resp = conn.getresponse(); exit(0)
        if resp.status == 200 else exit(1)
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
    - data_pipeline_network
    restart: always
networks:
  data_pipeline_network: {}
volumes:
  apacheflink_jobmanager_jobmanager-logs: {}
  apacheflink_taskmanager_taskmanager-logs: {}
  mysql_mysql_mysql_data: {}
  cassandra_cassandra_cassandra_data: {}
  prefect_prefect-orion_prefect_data: {}
