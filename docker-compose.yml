version: '3.9'
services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
    - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_SERVER_ID: ${ZOOKEEPER_SERVER_ID}
      ZOOKEEPER_SERVERS: ${ZOOKEEPER_SERVERS}
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 8
    networks:
    - data_pipeline_network
  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
    - 9092:9092
    - 29092:29092
    - 9999:9999
    environment:
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_LOG4J_LOGGERS: ${KAFKA_LOG4J_LOGGERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_JMX_PORT: ${KAFKA_JMX_PORT}
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: ${KAFKA_AUTHORIZER_CLASS_NAME}
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: ${KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND}
    depends_on:
      zoo1:
        condition: service_healthy
    restart: always
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 10s
      retries: 8
    networks:
    - data_pipeline_network
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.3.2
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    ports:
    - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: ${SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS}
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_HOST_NAME}
      SCHEMA_REGISTRY_LISTENERS: ${SCHEMA_REGISTRY_LISTENERS}
    depends_on:
      zoo1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    restart: always
    healthcheck:
      test:
      - CMD
      - curl
      - --silent
      - --fail
      - http://localhost:8081/subjects
      interval: 10s
      timeout: 10s
      retries: 8
    networks:
    - data_pipeline_network
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.2
    hostname: kafka-rest-proxy
    container_name: kafka-rest-proxy
    ports:
    - 8082:8082
    environment:
      KAFKA_REST_LISTENERS: ${KAFKA_REST_LISTENERS}
      KAFKA_REST_SCHEMA_REGISTRY_URL: ${KAFKA_REST_SCHEMA_REGISTRY_URL}
      KAFKA_REST_HOST_NAME: ${KAFKA_REST_HOST_NAME}
      KAFKA_REST_BOOTSTRAP_SERVERS: ${KAFKA_REST_BOOTSTRAP_SERVERS}
    depends_on:
      zoo1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy
    restart: always
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8082
      interval: 10s
      timeout: 10s
      retries: 8
    networks:
    - data_pipeline_network
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.3.2
    hostname: kafka-connect
    container_name: kafka-connect
    ports:
    - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${CONNECT_BOOTSTRAP_SERVERS}
      CONNECT_REST_PORT: ${CONNECT_REST_PORT}
      CONNECT_GROUP_ID: ${CONNECT_GROUP_ID}
      CONNECT_CONFIG_STORAGE_TOPIC: ${CONNECT_CONFIG_STORAGE_TOPIC}
      CONNECT_OFFSET_STORAGE_TOPIC: ${CONNECT_OFFSET_STORAGE_TOPIC}
      CONNECT_STATUS_STORAGE_TOPIC: ${CONNECT_STATUS_STORAGE_TOPIC}
      CONNECT_KEY_CONVERTER: ${CONNECT_KEY_CONVERTER}
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: ${CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL}
      CONNECT_VALUE_CONVERTER: ${CONNECT_VALUE_CONVERTER}
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL}
      CONNECT_INTERNAL_KEY_CONVERTER: ${CONNECT_INTERNAL_KEY_CONVERTER}
      CONNECT_INTERNAL_VALUE_CONVERTER: ${CONNECT_INTERNAL_VALUE_CONVERTER}
      CONNECT_REST_ADVERTISED_HOST_NAME: ${CONNECT_REST_ADVERTISED_HOST_NAME}
      CONNECT_LOG4J_ROOT_LOGLEVEL: ${CONNECT_LOG4J_ROOT_LOGLEVEL}
      CONNECT_LOG4J_LOGGERS: ${CONNECT_LOG4J_LOGGERS}
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: ${CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR}
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: ${CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR}
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: ${CONNECT_STATUS_STORAGE_REPLICATION_FACTOR}
      CONNECT_PLUGIN_PATH: ${CONNECT_PLUGIN_PATH}
    volumes:
    - /home/cmdadmin/Desktop/CAP/Ahmad-Shaheer/temp_merged_volumes/apachekafka_kafka-connect_connectors:/etc/kafka-connect/jars/
    depends_on:
      zoo1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy
      kafka-rest-proxy:
        condition: service_healthy
    restart: always
    healthcheck:
      test:
      - CMD
      - curl
      - --silent
      - --fail
      - http://localhost:8083/connectors
      interval: 10s
      timeout: 10s
      retries: 8
    networks:
    - data_pipeline_network
  conduktorDB:
    image: postgres:14
    hostname: conduktorDB
    container_name: conduktorDB
    volumes:
    - apachekafka_conduktorDB_pg_data:/var/lib/postgresql/data
    ports:
    - 5432:5432
    environment:
      POSTGRES_DB: ${CONDUKTOR_POSTGRES_DB}
      POSTGRES_USER: ${CONDUKTOR_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CONDUKTOR_POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${CONDUKTOR_POSTGRES_HOST_AUTH_METHOD}
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U $${CONDUKTOR_POSTGRES_USER} -d $${CONDUKTOR_POSTGRES_DB}
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 30s
    networks:
    - data_pipeline_network
  conduktor-console:
    image: conduktor/conduktor-console:1.26.0
    hostname: conduktor-console
    container_name: conduktor-console
    ports:
    - 8080:8080
    volumes:
    - apachekafka_conduktor-console_conduktor_data:/var/conduktor
    environment:
      CDK_DATABASE_URL: ${CDK_DATABASE_URL}
      CDK_CLUSTERS_0_ID: ${CDK_CLUSTERS_0_ID}
      CDK_CLUSTERS_0_NAME: ${CDK_CLUSTERS_0_NAME}
      CDK_CLUSTERS_0_COLOR: ${CDK_CLUSTERS_0_COLOR}
      CDK_CLUSTERS_0_BOOTSTRAPSERVERS: ${CDK_CLUSTERS_0_BOOTSTRAPSERVERS}
      CDK_CLUSTERS_0_SCHEMAREGISTRY_URL: ${CDK_CLUSTERS_0_SCHEMAREGISTRY_URL}
      CDK_CLUSTERS_0_KAFKACONNECTS_0_URL: ${CDK_CLUSTERS_0_KAFKACONNECTS_0_URL}
      CDK_CLUSTERS_0_KAFKACONNECTS_0_NAME: ${CDK_CLUSTERS_0_KAFKACONNECTS_0_NAME}
    depends_on:
      conduktorDB:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    restart: always
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8080/health
      interval: 10s
      timeout: 10s
      retries: 8
      start_period: 30s
    networks:
    - data_pipeline_network
  mysql:
    image: mysql:8.0
    container_name: mysql_service
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
    - 3306:3306
    volumes:
    - mysql_mysql_mysql_data:/var/lib/mysql
    networks:
    - data_pipeline_network
    healthcheck:
      test:
      - CMD
      - mysqladmin
      - ping
      - --silent
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: mysql_gui
    environment:
      PMA_HOST: ${PMA_HOST}
      PMA_USER: ${PMA_USER}
      PMA_PASSWORD: ${PMA_PASSWORD}
    ports:
    - 8084:80
    depends_on:
      mysql:
        condition: service_healthy
    networks:
    - data_pipeline_network
    healthcheck:
      test:
      - CMD
      - curl
      - -Ss
      - http://localhost/robots.txt
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
  jobmanager:
    image: apache/flink:1.16.0
    container_name: flink-jobmanager
    command: jobmanager
    environment:
    - JOB_MANAGER_RPC_ADDRESS=${FLINK_JOB_MANAGER_RPC_ADDRESS}
    - 'FLINK_PROPERTIES=

      jobmanager.rpc.address: ${FLINK_JOB_MANAGER_RPC_ADDRESS}

      '
    ports:
    - 8085:8081
    networks:
    - data_pipeline_network
    volumes:
    - apacheflink_jobmanager_jobmanager-logs:/opt/flink/log
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8081/taskmanagers
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  taskmanager:
    image: apache/flink:1.16.0
    container_name: flink-taskmanager
    command: taskmanager
    environment:
    - JOB_MANAGER_RPC_ADDRESS=${FLINK_JOB_MANAGER_RPC_ADDRESS}
    - 'FLINK_PROPERTIES=

      jobmanager.rpc.address: ${FLINK_JOB_MANAGER_RPC_ADDRESS}

      '
    depends_on:
      jobmanager:
        condition: service_healthy
    restart: always
    networks:
    - data_pipeline_network
    volumes:
    - apacheflink_taskmanager_taskmanager-logs:/opt/flink/log
    healthcheck:
      test:
      - CMD-SHELL
      - ps aux | grep -q 'taskmanager'
      interval: 30s
      timeout: 10s
      retries: 8
      start_period: 30s
  prefect-orion:
    image: prefecthq/prefect:2-latest
    container_name: prefect-orion
    command: "bash -c \"\n  prefect server start --host 0.0.0.0 --port 4200\n\"\n"
    ports:
    - 4200:4200
    volumes:
    - prefect_prefect-orion_prefect_data:/root/.prefect
    networks:
    - data_pipeline_network
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import http.client; conn = http.client.HTTPConnection('localhost', 4200);
        conn.request('GET', '/health'); exit(0) if conn.getresponse().status == 200
        else exit(1)
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  prefect-worker:
    image: prefecthq/prefect:2-latest
    container_name: prefect-worker
    depends_on:
      prefect-orion:
        condition: service_healthy
    environment:
      PREFECT_API_URL: http://prefect-orion:4200/api
    command: "bash -c \"\n  prefect worker start -p default\n\"\n"
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import http.client, json; conn = http.client.HTTPConnection('prefect-orion',
        4200); conn.request('GET', '/api/health'); resp = conn.getresponse(); exit(0)
        if resp.status == 200 else exit(1)
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
    - data_pipeline_network
    restart: always
networks:
  data_pipeline_network: {}
volumes:
  apachekafka_conduktorDB_pg_data: {}
  apachekafka_conduktor-console_conduktor_data: {}
  mysql_mysql_mysql_data: {}
  apacheflink_jobmanager_jobmanager-logs: {}
  apacheflink_taskmanager_taskmanager-logs: {}
  prefect_prefect-orion_prefect_data: {}
