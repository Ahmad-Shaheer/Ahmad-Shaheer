version: "3.9"
 
services:
  airflow-db:
    image: postgres:14
    container_name: airflow-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - airflow_network
 
  airflow-init:
    image: apache/airflow:2.6.2
    container_name: airflow-init
    depends_on:
      airflow-db:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
    command: >
      bash -c "
        echo 'Initializing Airflow DB...' &&
        airflow db init &&
        echo 'Creating Airflow admin user...' &&
        airflow users create --username ${AIRFLOW_ADMIN_USER} --password ${AIRFLOW_ADMIN_PASS} --firstname Airflow --lastname Admin --role Admin --email ${AIRFLOW_ADMIN_EMAIL} &&
        echo 'Airflow initialization is complete! Container will stay alive for healthcheck...' &&
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD-SHELL", "airflow db check"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - airflow_network
 
  airflow-scheduler:
    image: apache/airflow:2.6.2
    container_name: airflow-scheduler
    depends_on:
      airflow-db:
        condition: service_started
      airflow-init:
        condition: service_healthy
    restart: always
 
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    command: ["airflow", "scheduler"]
    networks:
      - airflow_network
 
  airflow-webserver:
    image: apache/airflow:2.6.2
    container_name: airflow-webserver
    depends_on:
      airflow-scheduler:
        condition: service_started
      airflow-init:
        condition: service_healthy
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
    ports:
      - "8080:8080"
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    command: ["airflow", "webserver"]
    networks:
      - airflow_network
 
networks:
  airflow_network:
 
volumes:
  airflow_db_data:
  airflow_dags:
  airflow_logs: